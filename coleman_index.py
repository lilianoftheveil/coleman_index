# -*- coding: utf-8 -*-
"""Processamento de Linguagem Natural.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VDiKWJTKXiJHpuQPvsYt-gUDsQkRcP3l
"""

x = input("Digit your text: ")

# Number of words
w = 1
for a in x:
    if a == " ":
        w = w + 1

# Number of sentences
s = 0
for b in x:
    if b == "." or b == "!" or b == "?" or b == "...":
        s = s + 1

# Number of letters
l = 0
for c in x:
    # PYTHON Documentation (Utilities for ASCII characters - that check all letters lower and upper -)
    if c.isalpha():
        l = l + 1

# Coleman-Liau index
cl = (l / w * 100)
cs = (s / w * 100)
calcu = round((0.0588 * cl) - (0.296 * cs) - 15.8)

# Print of the Before Grade 1
if calcu < 1:
    print("Before Grade 1")

# Print of the Grade 1
if calcu == 1 or calcu > 1 and calcu <= 16:
    print(f"Grade {calcu}")

# Print of the Grade more than 16
if calcu > 16:
  print("Grade 16+")

print(w)

my_dict = {"1":[{"Name":[],"Address":[]}],"2":[]};

x = input("name: ")
my_dict["Name"].append(x)
y = input("address: ")
my_dict["Address"].append(y)

print(my_dict)

x = input("text: ")

l = ["do que", "tal qual", "tal como", "tão", "quanto", "parece", "como"]

if x in l:
    print("comparação")

x = input("Digit your text: ")

# Number of words
w = 1
for a in x:
    if a == " ":
        w = w + 1

# Number of sentences
s = 0
for b in x:
    if b == "." or b == "!" or b == "?":
        s = s + 1

# Number of letters
l = 0
for c in x:
    # PYTHON Documentation (Utilities for ASCII characters - that check all letters lower and upper -)
    if c.isalpha():
        l = l + 1


# Coleman-Liau index
cl = (l / w * 100)

cs = (s / w * 100)

calcu = round((0.0588 * cl) - (0.296 * cs) - 15.8)


# Print of the Before Grade 1
if calcu < 1:
    print("Before Grade 1")

# Print of the Grade 1
if calcu == 1 or calcu > 1 and calcu < 16:
    print(f"Grade {calcu}")

# Print of the Grade mora then 16
if calcu > 16:
  print("Grade 16+")

import xml.etree.ElementTree as ET
from jjcli import *

lista=glob("../recortes/**/*.xml", recursive=True)
#print(len(lista))
#print(lista)


for filename in lista:
    try:
        arvore = ET.parse(filename).getroot()
    except Exception as erro:
        #print("Erro no ficheiro", filename, erro)
        continue

    print(f"<H1>{filename}</H1>")
    for f in arvore.findall("fonte"):
        print(f.attrib)
        print(f.attrib["data"])
        t = arvore.find("titulo")
        print(t.text)

"""# Stage 0: Import Packages"""

from google.colab import drive
drive.mount('/content/drive')

import csv
import random
import json
import numpy as np

"""# Stage 1: Extract Data"""

dataset_scopus = "/scopus.csv"

title = 0
citations = 1
doi = 2
link = 3
abstract = 4
keywords = [5,7,9,11,13,15,17,19]
authors = [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]

list_papers = []
list_authors = []
list_keywords = []

def update_list(elementa, list_authors, citations):
  k = 0
  for check in list_authors:
    if check.get('name') == elementa:
      author = {
        'name': elementa,
        'num_apar': check.get('num_apar') + 1,
        'num_cit': check.get('num_cit') + citations
      }
      list_authors[k] = author
      return True
    k += 1
  return False

def get_values(real_authors, list_authors, citations):
  for elementa in real_authors:
    if update_list(elementa, list_authors, citations) == False:
      author = {
        'name': elementa,
        'num_apar': 1,
        'num_cit': citations
      }
      list_authors.append(author)
  return list_authors

with open(dataset_scopus, 'r') as file:
  csvreader = csv.reader(file)
  next(csvreader)
  for row in csvreader:
    if not not row[citations]:
      nplist = np.array(row)
      real_authors = list(filter(None, nplist[authors]))
      real_keywords = list(filter(None, nplist[keywords]))
      new_cit = int(row[citations])
      paper = {
          'doi': nplist[doi],
          'title': nplist[title],
          'abstract': nplist[abstract],
          'link': nplist[link],
          'citations': new_cit,
          'keywords': real_keywords,
          'authors': real_authors
      }
      list_papers.append(paper)
      list_authors = get_values(real_authors, list_authors, new_cit)
      list_keywords = get_values(real_keywords, list_keywords, new_cit)

for i in range(0,10,1):
  print(list_authors[i])

for i in range(0,10,1):
  print(list_keywords[i])

for i in range(0,10,1):
  print(list_papers[i])

"""# Stage 2: Process Data

2.1. Get top 10 Authors
"""

print(len(list_authors))

print(len(list_keywords))

print(len(list_papers))

list_authors.sort(key=lambda x: x.get('num_cit'), reverse=True)

list_keywords.sort(key=lambda x: x.get('num_cit'), reverse=True)

with open("/content/drive/MyDrive/PortLinguE/Script/top_authors_citation.json", "w") as outfile:
    outfile.write(str(list_authors))

with open("/content/drive/MyDrive/PortLinguE/Script/top_keywords_citation.json", "w") as outfile:
    outfile.write(str(list_keywords))

pip install jjcli

#!usr/bin/python3
from jjcli import *
import xml.etree.ElementTree as ET
lista = glob("*.py", recursive=True)
print(len(lista))
print(lista)

for filename in lista:
  arvore = ET.parse(filename).getroot()
  for f in arvore.findall("fonte"):
    print(f.attrib)
    print(f.attrib["data"])

for filename in lista:
  print("****", filename)
  try:
    arvore = ET.parse(filename).getroot()
    for f in arvore.findall("fonte"):
      print(f.attrib)
      print(f.attib["data"])
      print(t.txt)
  except Exception as erro:
    print("ERRO no ficheiro")

def diclist(i):
  a = []
  b = []
  for x in i.keys():
    a.append(x)
  for x, y in i.items():
    b.append(y)
  print(a)
  print(b)

d = {
	"a": 1,
	"b": 2,
	"c": 3
}

diclist(d)

from matplotlib import pyplot as plt

xx = ["a", "b", "c"]
yy = [1, 2, 3]

plt.bar(xx, yy)

plt.show()

# a função sorted permite organizar os itens de uma lista de modo crescente ou decrescente
# https://www.w3schools.com/python/ref_func_sorted.asp
while True:
    x = input("Insira um título: ")
    y = input("Insira o autor: ")
    if x == "" or y == "":
        print("ERRO: os campos 'título' e 'autor' não podem ser vazios.")
        continue
    else:
        break

co_list = []
count = 0

while True:
  if count < 5:
    co = input(f"Insira um co-autor ({count}/5): ")
    if co != "":
      if co in co_list:
        print(f"AVISO: co-autor '{co}' já existe!")
        continue
      elif co not in co_list:
        co_list.append(co)
        count = count + 1
        continue
    else:
        break
  elif count == 5:
    print("AVISO: Limite de co-autores atingido (5/5)")
    break

z = input("Insira a data da publicação: ")

a = input("Formato final (YAML, JSON ou XML): ").upper()
b = input("Nome do ficheiro: ")
if b == "":
    b = x
if a == "XML":
    if z == "":
        c = str("<obra>\n" + "\t<titulo>" + (x) + "</titulo>" + "\n\t<autor>" + (y) + "</autor>"
        + "\n\t<co-autores>" + "\n\t\t<co-autor>"
        + ("</co-autor>\n\t\t<co-autor>".join(sorted(co_list))) + "</co-autor>\n"
        + "\t</co-autores>" + "\n</obra>") #função sorted
        print(c)
        ficheiro = open(f'{b}.xml', 'w')
        ficheiro.write(c)
        ficheiro.close()
    else:
        c = str("<obra data=" + "'" + (z) + "'" + ">\n" + "\t<titulo>" + (x) + "</titulo>"
        + "\n\t<autor>" + (y) + "</autor>" + "\n\t<co-autores>" + "\n\t\t<co-autor>"
        + ("</co-autor>\n\t\t<co-autor>".join(sorted(co_list))) + "</co-autor>\n"
        + "\t</co-autores>" + "\n</obra>") #função sorted
        print(c)
        ficheiro = open(f'{b}.xml', 'w')
        ficheiro.write(c)
        ficheiro.close()

!pip install wikipedia
import wikipedia

wikipedia.set_lang("en")

wikipedia.search("artificial intelligence")

print(wikipedia.summary("artificial intelligence"))

print(wikipedia.summary("artificial intelligence", sentences=1))

print(wikipedia.summary("data science", sentences=1))

!pip install nltk

wikipage = wikipedia.page("artificial intelligence").content
print(wikipage)

import nltk
from nltk.tokenize import sent_tokenize
nltk.download('punkt')

wiki_sent = []
wiki_sent = sent_tokenize(wikipage)
print(wikipage)

co = []
cc = 0

while True:
  x = input("Insira um título: ")
  y = input("Insira o autor: ")
  if x == "" or y == "":
    print("ERRO: os campos título e autor não podem ser vazios.")
    continue
  else:
    break

while cc < 5:
    xx = input("Insira um co-autor " + "(" + str(len(co)+1) + "/5): ")
    if xx not in co and xx != "":
        co.append(xx)
        cc = cc + 1
        continue
    elif cc >= 5:
      print("AVISO: Limite de co-autores atingido")
      break
    elif xx in co:
        print(f'"{xx}" já existe.')
        continue
    else:
        break
z = input("Insira a data da publicação: ")

a = input("Formato final (YAML, JSON ou XML): ").upper()
b = input("Nome do ficheiro: ")

if b == "":
    b = x

if a == "YAML" or a =="":
    if z == "":
        c = str(f"Título: {x}\nAutor: {y}\nco-autores:")
        print(c)
        for i in co:
          print(f" - {i}")
        ficheiro = open(f'{b}.yaml', 'w')
        ficheiro.write(c)
        ficheiro.close()
    else:
        c = str(f"Título: {x}\nAutor: {y}\nData: {z}")
        print(c)
        ficheiro = open(f'{b}.yaml', 'w')
        ficheiro.write(c)

# Variáveis

x = 0		# variável do tipo inteira
x = 0.1		# variável do tipo flutuante
x = "Snake"	# variável do tipo texto
x = False	# variável do tipo boolean

# nomenclatura
"""
 - sem espaços
 - começar com letra ou _
 - case sensitive
"""

# Exemplo de leitura cascata:
x = 1
x = "Lion"
print(x)

# Função Print

print("Mensagem")

x = 0
print (x)

# print de mais de um valor/variável

x = "Crocodile"
y = "Ocean"
print (x, y) # por padrão add espaço entre as variáveis

a = input("What is your name? ") # discutir conceitos no fim
print(f"Hello, {a}!")

a = input("What is your name? ")
print("Hello, " + a + "!")
print(f"Hello, {a}!")

# Operadores Aritméticos
"""
Adição		+
Subtração	-
Multiplicação	*
Divisão	/
Módulo	%
Exponenciação **
Divisão (arredonda para o número inteiro mais próximo) //
"""

# entre variáveis
x = 1
y = 2
z = x + y
print(z)

# expresso no próprio comando print
print(x + y)

# mix variáveis e valores
print(10 + y)

# concatenação
x = "I’m "
y = "Banana"
print (x + y)

# Operadores de Comparação

"""
Igual		==
Diferente	!=
Maior que	>
Menor que	<
Maior ou igual a que	>=
Menor ou igual a que	=<
"""

# Exemplo:
1 == 1

# Exemplo 2:
x = 0
y = 1
x == y

# Exemplo 3:
x = 0
x <= 5

pip install Pillow

image_1 = Image.open(r'DSC_7552.jpeg')
im_1 = image_1.convert('RGB')
im_1.save(r'DSC_7552.pdf')



"""# Stage 0: Import Packages"""

from google.colab import drive
drive.mount('/content/drive')

import csv
import random
import json
import numpy as np

"""# Stage 1: Extract Data"""

dataset_scopus = "/scopus.csv"

title = 0
citations = 1
doi = 2
link = 3
abstract = 4
keywords = [5,7,9,11,13,15,17,19]
authors = [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]

list_papers = []
list_authors = []
list_keywords = []

def update_list(elementa, list_authors, citations):
  k = 0
  for check in list_authors:
    if check.get('name') == elementa:
      author = {
        'name': elementa,
        'num_apar': check.get('num_apar') + 1,
        'num_cit': check.get('num_cit') + citations
      }
      list_authors[k] = author
      return True
    k += 1
  return False

def get_values(real_authors, list_authors, citations):
  for elementa in real_authors:
    if update_list(elementa, list_authors, citations) == False:
      author = {
        'name': elementa,
        'num_apar': 1,
        'num_cit': citations
      }
      list_authors.append(author)
  return list_authors

with open(dataset_scopus, 'r') as file:
  csvreader = csv.reader(file)
  next(csvreader)
  for row in csvreader:
    if not not row[citations]:
      nplist = np.array(row)
      real_authors = list(filter(None, nplist[authors]))
      real_keywords = list(filter(None, nplist[keywords]))
      new_cit = int(row[citations])
      paper = {
          'doi': nplist[doi],
          'title': nplist[title],
          'abstract': nplist[abstract],
          'link': nplist[link],
          'citations': new_cit,
          'keywords': real_keywords,
          'authors': real_authors
      }
      list_papers.append(paper)
      list_authors = get_values(real_authors, list_authors, new_cit)
      list_keywords = get_values(real_keywords, list_keywords, new_cit)

for i in range(0,10,1):
  print(list_authors[i])

for i in range(0,10,1):
  print(list_keywords[i])

for i in range(0,10,1):
  print(list_papers[i])

"""# Stage 2: Process Data

2.1. Get top 10 Authors
"""

print(len(list_authors))

print(len(list_keywords))

print(len(list_papers))

list_authors.sort(key=lambda x: x.get('num_cit'), reverse=True)

list_keywords.sort(key=lambda x: x.get('num_cit'), reverse=True)

with open("/content/drive/MyDrive/PortLinguE/Script/top_authors_citation.json", "w") as outfile:
    outfile.write(str(list_authors))

with open("/content/drive/MyDrive/PortLinguE/Script/top_keywords_citation.json", "w") as outfile:
    outfile.write(str(list_keywords))

# Operadores Lógicos
"""
and	(avalia se ambas as condições são verdadeiras)
or	(avalia se ao menos uma das condições é verdadeira)
not	(reverte o resultado, retornando False caso a(s)
condições forem verdadeiras e vice-versa)
"""

# Exemplo 1:
1 == 1 and 1 == 0

# Exemplo 2:
1 == 1 or 1 == 0

# Exemplo 3:
x = 0
y = 1
not x < 1

# If, Elif e Else

#Exemplo:
x = 0
y = 1
if x > y: # identação : e TAB
  print ("x é maior do que y")

#Exemplo:
x = 0
y = 1

if x > y:
	print ("x é maior do que y")
elif x < y:
	print ("y é maior do que x")

#Exemplo:
x = 0
y = 1
if x > y:
	print ("x é maior do que y")
elif x == y:
	print ("y é igual a x")
else:
	print ("nenhuma condição antecedente é verdadeira")

#While Loops
x = 0
y = 7
while x < y:
	print("x é menor do que y")

#Exemplo:
x = 0
y = 7
while x < y:
	print ("x ainda é menor do que y")
	x = x + 1 # ou x += 1

#Exemplo aula
x = 0
y = "#"
while x < 5:
  print(y)
  x = x + 1
  y = y + "#"

x = 0

while x < 5:
  y = input("Digite um co-autor: ")
  if y != "":
    x = x + 1
    continue
  else:
    break

#While Loops (True)

#Exemplo:
x = 0
y = 7
while True:
	if x == 0:
	  print ("x é igual a 0")

x = input("Digit your text: ")

# Number of words
w = 1
for a in x:
    if a == " ":
        w = w + 1

# Number of sentences
s = 0
for b in x:
    if b == "." or b == "!" or b == "?":
        s = s + 1

# Number of letters
l = 0
for c in x:
    # PYTHON Documentation (Utilities for ASCII characters - that check all letters lower and upper -)
    if c.isalpha():
        l = l + 1


# Coleman-Liau index
cl = (l / w * 100)

cs = (s / w * 100)

calcu = round((0.0588 * cl) - (0.296 * cs) - 15.8)


# Print of the Before Grade 1
if calcu < 1:
    print("Before Grade 1")

# Print of the Grade 1
if calcu == 1 or calcu > 1 and calcu < 16:
    print(f"Grade {calcu}")

# Print of the Grade mora then 16
if calcu > 16:
  print("Grade 16+")

co = []
cc = 0

while True:
  x = input("Insira um título: ")
  y = input("Insira o autor: ")
  if x == "" or y == "":
    print("ERRO: os campos título e autor não podem ser vazios.")
    continue
  else:
    break

while cc < 5:
    xx = input("Insira um co-autor: ")
    if xx not in co and xx != "":
        co.append(xx)
        cc = cc + 1
        continue
    elif xx in co:
        print(f'"{xx}" já existe.')
        continue
    else:
        break
z = input("Insira a data da publicação: ")

# 1) Escreva um programa que imprima na consola o seguinte: Olá, Mundo!

print("Hello World!")

# 2) Escreva um programa que imprima na consola o seguinte:

#
##
###
####
#####

x = 0
y = "#"
while x < 5:
  print(y)
  x = x + 1
  y = y + "#"

x = "#"

print(f"{x}\n{x}{x}\n{x}{x}{x}\n{x}{x}{x}{x}\n{x}{x}{x}{x}{x}\n")

# 3)Escreva um programa que imprima na consola o seguinte:

##########
#        #
#        #
#        #
##########

y = "##########"
z = "#        #"
print(f"{y}\n{z}\n{z}\n{z}\n{y}")

# 4)Escreva um programa que leia da consola um nome e imprima uma saudação.
# Exemplo: se o nome inserido for Pedro, o programa deverá imprimir: Olá, Pedro!

x = input("Qual é o seu nome? ")
print(f"Olá, {x}!")



x = input("Insira um título: ")
y = input("Insira o autor: ")
z = input("Insira a data da publicação: ")

while True:
    a = input("Formato final (YAML ou JSON): ").upper()
    if a != "YAML" and a != "JSON":
        continue
    elif a == "YAML":
        print(f"Título: {x}\nAutor: {y}\nData: {z}")
        break
    elif a == "JSON":
        print(f" {{\n\t\"Título\": \"{x}\",\n\t\"Autor\": \"{y}\",\n\t\"Data\": \"{z}\"\n }}")
        break

x = input("Insira um título: ")
y = input("Insira o autor: ")
z = input("Insira a data da publicação: ")

while True:
  format = input("YAML or JSON: ").upper()
  if format == "YAML":
    p = (f"Título: {x}\nAutor: {y}\nData de Publicação: {z}")
    print(p)
    a = open("archive.yaml", "w")
    a.write(p)
    a.close()
    break
  elif format == "JSON":
    print("{")
    print('\t"título: "' + x + '",')
    print('\t"autor: "' + x + '",')
    print('\t"data: "' + x + '"')
    print("}")
    a = open("archive.json", "w")
    a.write(p)
    a.close()

    break
  else:
    continue

x = 0
l = [0,1,2,3,4,5,6,7,8,9]
for y in l:
  if x < y:
    x = y
  elif x > y:
    x = x

print(x)

l = []
for i in range(10):
  print(i)
  l.append(i)

print(l)